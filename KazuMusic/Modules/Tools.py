import os
import asyncio

from pyrogram import Client, filters
from pyrogram.types import Message

from KazuMusic import app, Ass, BOT_NAME, SUDO_USERS
from KazuMusic.Helpers.Database import get_active_chats


__MODULE__ = "T·¥è·¥è üs"
__HELP__ = """

**…¥·¥è·¥õ·¥á :**
·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs


/joinassistant [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/…™·¥Ö]
¬ª ·¥è Ä·¥Ö·¥á Ä ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.

/leaveassistant [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/…™·¥Ö]
¬ª ·¥è Ä·¥Ö·¥á Ä ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.

/leavebot [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/…™·¥Ö]
¬ª ·¥è Ä·¥Ö·¥á Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.
"""


@app.on_message(filters.command(["vcs", "m"]) & filters.user(SUDO_USERS))
async def activevc(_, message: Message):
    served_chats = []
    try:
        chats = await get_active_chats()
        for chat in chats:
            served_chats.append(int(chat["chat_id"]))
    except Exception as e:
        await message.reply_text(f"**·¥á Ä Ä·¥è Ä :** {e}")
    text = ""
    j = 0
    for x in served_chats:
        try:
            title = (await app.get_chat(x)).title
        except Exception:
            title = "·¥© Ä…™·¥†·¥Ä·¥õ·¥á …¢ Ä·¥è·¥ú·¥©"
        if (await app.get_chat(x)).username:
            user = (await app.get_chat(x)).username
            text += (
                f"<b>{j + 1}.</b>  [{title}](https://t.me/{user})[`{x}`]\n\n"
            )
        else:
            text += f"<b>{j + 1}. {title}</b> [`{x}`]\n\n"
        j += 1
    if not text:
        await message.reply_text(f"**¬ª …¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õs ·¥è…¥ {BOT_NAME} s·¥á Ä·¥†·¥á Ä.**")
    else:
        await message.reply_text(
            f"**¬ª ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õs ·¥è…¥ {BOT_NAME} s·¥á Ä·¥†·¥á Ä :**\n\n{text}",
            disable_web_page_preview=True,
        )

@app.on_message(filters.command(["vcv", "v"]) & filters.user(SUDO_USERS))
async def activevi_(_, message: Message):
    mystic = await message.reply_text(
        "Getting active video chats.. Please hold"
    )
    served_chats = await get_active_video_chats()
    text = ""
    j = 0
    for x in served_chats:
        try:
            title = (await app.get_chat(x)).title
        except Exception:
            title = "Private Group"
        if (await app.get_chat(x)).username:
            user = (await app.get_chat(x)).username
            text += f"<b>{j + 1}.</b>  [{title}](https://t.me/{user})[`{x}`]\n"
        else:
            text += f"<b>{j + 1}. {title}</b> [`{x}`]\n"
        j += 1
    if not text:
        await mystic.edit_text("No Active Voice Chats")
    else:
        await mystic.edit_text(
            f"**·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ·¥Ä ü üs:-**\n\n{text}",
            disable_web_page_preview=True,
        )

@app.on_message(filters.command(["joinassistant", "join", "ass", "assistant"]) & filters.user(SUDO_USERS))
async def assjoin(_, message):
    if len(message.command) != 2:
        await message.reply_text(
            "**·¥áx·¥Ä·¥ç·¥© ü·¥á :**\n/joinassistant [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö]"
        )
        return
    chat = message.text.split(None, 2)[1]
    try:
        await Ass.join_chat(chat)
    except Exception as e:
        await message.reply_text(f"“ì·¥Ä…™ ü·¥á·¥Ö.\n\n** Ä·¥á·¥Äs·¥è…¥ :** {e}")
        return
    await message.reply_text("**¬ª s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ä·¥è…™…¥·¥á·¥Ö ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.**")


@app.on_message(filters.command(["leavebot", "leave"]) & filters.user(SUDO_USERS))
async def botl(_, message):
    if len(message.command) != 2:
        await message.reply_text(
            "**·¥áx·¥Ä·¥ç·¥© ü·¥á :**\n/leavebot [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö]"
        )
        return
    chat = message.text.split(None, 2)[1]
    try:
        await app.leave_chat(chat)
    except Exception as e:
        await message.reply_text(f"“ì·¥Ä…™ ü·¥á·¥Ö\n** Ä·¥á·¥Äs·¥è…¥ :** {e}")
        print(e)
        return
    await message.reply_text("**¬ª s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ü·¥á“ì·¥õ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.**")


@app.on_message(filters.command(["leaveassistant", "assleave", "userbotleave", "leaveass"]) & filters.user(SUDO_USERS))
async def assleave(_, message):
    if len(message.command) != 2:
        await message.reply_text(
            "**·¥áx·¥Ä·¥ç·¥© ü·¥á :**\n/assleave [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö]"
        )
        return
    chat = message.text.split(None, 2)[1]
    try:
        await Ass.leave_chat(chat)
    except Exception as e:
        await message.reply_text(f"“ì·¥Ä…™ ü·¥á·¥Ö\n** Ä·¥á·¥Äs·¥è…¥ :** {e}")
        return
    await message.reply_text("**¬ª ·¥Äss…™s·¥õ·¥Ä…¥·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ü·¥á“ì·¥õ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.**")

@app.on_message(filters.command("aktif", [".", "^", "-", "!", "/"]) & filters.user(SUDO_USERS))
async def activecilik(_, message: Message):
    ms = len(await get_active_chats())
    vd = len(await get_active_video_chats())
    await app.send_message(message.chat.id, 
        f"üíΩ ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ñ ú·¥Ä·¥õs:\n\n‚Ä¢ ·¥ç·¥ús…™·¥Ñ: {ms}\n‚Ä¢ ·¥†…™·¥Ö·¥á·¥è:{vd}")